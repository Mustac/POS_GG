@inject OrderService OrderService
@using System.Timers;
@using POS_GG_APP.Data
@inject GlobalManager GlobalManager
@implements IDisposable


<h5 class="text-center mb-4">Available Orders</h5>
@if (orders?.Count > 0)
{
    @foreach (var order in orders)
    {
        <MudPaper Class="p-3 my-2">
            <div class="d-flex w-100 h6 justify-content-between">
                <div>
                    <span><i class="fa-solid fa-user pr-1"></i> @order.UserOrderedName</span>
                    <span class="pr-2">@order.TimeOrdered.ToString("HH:mm")h</span>
                </div>
                <div>
                    <span>
                        <i class="fa-solid fa-clock pr-1 @(GetPassedMinutes(order.TimeOrdered) > 20 ? "text-danger" : "")"></i> @(GetPassedMinutes(order.TimeOrdered) < 1 ? "0" : GetPassedMinutes(order.TimeOrdered).ToString("#")) m
                    </span>
                </div>
            </div>
            <hr class="my-1" />
            <div>
                <ul>
                    @foreach (var product in order.OrderedProducts)
                    {
                        <li>
                            <div class="d-flex justify-content-between my-2" style="border-bottom:3px dotted rgb(120,120,120)">
                                <div>
                                    @product.Name
                                </div>
                                <div>
                                    @product.Quantity @product.Measurement
                                </div>
                            </div>
                        </li>
                    }
                </ul>
                @if(!string.IsNullOrEmpty(order.Message))
                {
                    <div>
                        <div class="bg-dark border rounded p-2">
                        @order.Message
                        </div>
                    </div>
                }
            </div>
            <div class="d-flex justify-content-end mt-2">
                <MudButton Color="Color.Success" Variant="Variant.Text">Take Order&nbsp;<i class="fa-solid fa-arrow-right-to-bracket"></i></MudButton>
            </div>
        </MudPaper>
    }
}

@code {
    List<OrderDTO> orders = new List<OrderDTO>();
    Timer timer;
    DateTime currentTime;

    protected async override Task OnInitializedAsync()
    {
        currentTime = DateTime.Now;
        timer = new Timer(10000); // Set the timer to tick every 10 seconds
        timer.Elapsed += UpdateTime;
        timer.Start();

        GlobalManager.OrderEvents.OnUserOrderCancelAsync += UserOrderCancel;
        GlobalManager.OrderEvents.OnOrderMade += AddToOrder;

        var orderResponse = await OrderService.GetOrdersAsync();

        if (orderResponse.IsSuccess)
            orders = orderResponse.Data;
    }

    private void UpdateTime(object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            currentTime = DateTime.Now;
            StateHasChanged();
        });
    }

    public async Task UserOrderCancel()
    {
        var orderResponse = await OrderService.GetOrdersAsync();

        if (orderResponse.IsSuccess)
            orders = orderResponse.Data;

        await InvokeAsync(() =>
               {
                   StateHasChanged();
               });
        
    }

    public void AddToOrder(List<OrderDTO> orders)
    {
        this.orders = orders;
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    double GetPassedMinutes(DateTime startTime)
    {
        return (currentTime - startTime).TotalMinutes;
    }

    public void Dispose()
    {
        timer?.Stop();
        timer?.Dispose();
        GlobalManager.OrderEvents.OnUserOrderCancelAsync -= UserOrderCancel;
        GlobalManager.OrderEvents.OnOrderMade -= AddToOrder;
    }
}
