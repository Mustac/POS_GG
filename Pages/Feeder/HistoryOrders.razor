@using POS_GG_APP.Data
@inject OrderService OrderService
@inject GlobalManager GlobalManager
@implements IDisposable


<h5 class="mt-2 mb-2">Order History : </h5>
<div style="border-bottom:2px dotted"></div>

@if (historyOrders is not null && historyOrders.Count > 0)
{
    @foreach (var order in historyOrders)
    {
        <MudPaper Class="p-3 my-2">
            <div class="border border-warning p-3 rounded">
                <div class="d-flex justify-content-between border border-0 border-bottom mb-1">
                        <div><i class="fa-solid fa-list-ol text-light pb-1"></i> : @order.UserOrderedName</div>
                        <div class="pr-2">@order.TimeOrdered.ToString("HH:mm")h</div>
                </div>
                <div class="d-flex justify-content-between border border-0 border-bottom mb-1">
                    <div>
                        <div><i class="fa-solid fa-truck text-warning"></i> : @order.UserDeliveredName</div>
                    </div>
                        @if(order is not null && order.TimeDelivered is not null && order.TimeDelivered.HasValue)
                        {
                              <span class="pr-2">@order.TimeDelivered.Value.ToString("HH:mm")h </span>  
                        }

                </div>
            </div>
            <div>
                <ul>
                    @foreach (var product in order.OrderedProducts)
                    {
                        <li>
                            <div class="d-flex justify-content-between my-2" style="border-bottom:3px dotted rgb(120,120,120)">
                                <div>
                                    @product.Name
                                </div>
                                <div>
                                    @product.Quantity @product.Measurement
                                </div>
                            </div>
                        </li>
                    }
                </ul>
                @if (!string.IsNullOrEmpty(order.Message))
                {
                    <div>
                        <div class="bg-dark border rounded p-2">
                            @order.Message
                        </div>
                    </div>
                }
            </div>
            <div class="d-flex justify-content-between mt-2">
            </div>
        </MudPaper>
    }
}

@code {
    List<OrderDTO> historyOrders = new List<OrderDTO>();

    protected async override Task OnInitializedAsync()
    {
        GlobalManager.OrderEvents.OnOrderStatusChange += OrderStatusChanged;

        var response = await OrderService.GetOrdersAsync(orderStatus: Helpers.OrderStatus.Delivered);

        if (response.IsSuccess)
            historyOrders = response.Data.OrderBy(x=>x.TimeOrdered.GetPassedMinutes()).ToList();
    }


    void OrderStatusChanged(OrderDTO order)
    {
        var orderTemp = historyOrders.FirstOrDefault(x => x.OrderId == order.OrderId);

        if (orderTemp is null && order.OrderStatus == OrderStatus.Delivered)
        {
            historyOrders.Add(order);
            historyOrders = historyOrders.OrderBy(x => x.TimeOrdered.GetPassedMinutes()).ToList();
            if (historyOrders.Count > 9)
            {
                historyOrders.Remove(historyOrders.LastOrDefault());
            }
        }

        StateHasChanged();

    }

    public void Dispose()
    {
        GlobalManager.OrderEvents.OnOrderStatusChange -= OrderStatusChanged;
    }

}
