@using POS_GG_APP.Data
@inject OrderService OrderService
@inject GlobalManager GlobalManager
@implements IDisposable

<AuthorizeView>
    <Authorized>
        <h5 class="mt-2 mb-2">Taken Orders : </h5>
        <div style="border-bottom:2px dotted"></div>

        @if(takenOrders is not null && takenOrders.Count > 0)
        {
            @foreach(var order in takenOrders)
            {
                <MudPaper Class="p-3 my-2">
                    <div class="d-flex w-100 h6 justify-content-between">
                        <div>
                            <span><i class="fa-solid fa-user pr-1"></i> @order.UserOrderedName</span>
                            <span class="pr-2">@order.TimeOrdered.ToString("HH:mm")h</span>
                        </div>
                        <div>
                            <span>
                                <i class="fa-solid fa-clock pr-1 @(order.TimeOrdered.GetPassedMinutes() > 20 ? "text-danger" : "")"></i> @(order.TimeOrdered.GetPassedMinutes() < 1 ? "0" : order.TimeOrdered.GetPassedMinutes().ToString("#")) m
                            </span>
                        </div>
                    </div>
                    <hr class="my-1" />
                    <div>
                        <ul>
                            @foreach (var product in order.OrderedProducts)
                            {
                                <li>
                                    <div class="d-flex justify-content-between my-2" style="border-bottom:3px dotted rgb(120,120,120)">
                                        <div>
                                            @product.Name
                                        </div>
                                        <div>
                                            @product.Quantity @product.Measurement
                                        </div>
                                    </div>
                                </li>
                            }
                        </ul>
                        @if (!string.IsNullOrEmpty(order.Message))
                        {
                            <div>
                                <div class="bg-dark border rounded p-2">
                                    @order.Message
                                </div>
                            </div>
                        }
                    </div>
                    <div class="d-flex justify-content-between mt-2">
                        <MudButton OnClick="@(()=>CancelOrderAsync(order))" Color="Color.Error" Variant="Variant.Text">Cancel&nbsp;</MudButton>
                        <MudButton OnClick="@(()=>CompleteOrderAsync(order))" Color="Color.Success" Variant="Variant.Text">Finish Delivery&nbsp;<i class="fa-solid fa-arrow-right-to-bracket"></i></MudButton>
                    </div>
                </MudPaper>
            }
        }
    </Authorized>
</AuthorizeView>

@code {
    List<OrderDTO> takenOrders = new List<OrderDTO>();

    protected async override Task OnInitializedAsync()
    {
        GlobalManager.OrderEvents.OnOrderStatusChange += OrderStatusChanged;

        var response = await OrderService.GetOrdersAsync(orderStatus: Helpers.OrderStatus.Taken);

        if (response.IsSuccess)
            takenOrders = response.Data;
    }

    public async Task CompleteOrderAsync(OrderDTO order)
    {
        await OrderService.ChangeOrderStatusAsync(order.OrderId, OrderStatus.Delivered);
    }

    public async Task CancelOrderAsync(OrderDTO order)
    {
        await OrderService.ChangeOrderStatusAsync(order.OrderId, OrderStatus.Started);
    }

    void OrderStatusChanged(OrderDTO order)
    {
        var orderTemp = takenOrders.FirstOrDefault(x => x.OrderId == order.OrderId);

        if (orderTemp is null && order.OrderStatus == OrderStatus.Taken)
        {
            takenOrders.Add(order);
        } else 
        {
            takenOrders.Remove(orderTemp);
        }

        StateHasChanged();

    }

    public void Dispose()
    {
        GlobalManager.OrderEvents.OnOrderStatusChange -= OrderStatusChanged;
    }

}
