@page "/production/order"
@layout ProductionLayout
@inject ProductService ProductService
@inject AuthenticationStateProvider AuthProvider
@inject OrderService OrderService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject MobileMenuService MobileMenuService
@inject SignInManager<ApplicationUser> SignInManager
@implements IDisposable
@using System.Timers;
@using Microsoft.AspNetCore.Identity
@using POS_OS_GG.Helpers
@using System.Diagnostics


<div class="row" style="padding-top:50px; padding-bottom:80px; height:100%">
    <div class="col-12 col-lg-7 p-0 p-lg-1" style="min-width:350px !important;">
    <div class="container-fluid">
        <div @ref="inputDropdown" class="row d-flex position-relative" >
            <div class="position-relative" style="flex:9">
                <div style="width:100%;">
                    <input autocomplete="off" @ref="input" id="autocomplete-input" type="text" step="z-index:1;" class="form-control bg-dark text-light rounded w-100 search-input" @bind="text" @oninput="InputChanged" @onfocus="InputFocus">
                    @if (loader != Loader.None)
                    {
                        <div style="position:absolute;right:25px;top:50%;transform:translateY(-50%);z-index:1;">

                            @if (loader == Loader.Spinner)
                            {
                                <i class="fa-solid fa-spinner fa-spin"></i>
                            }

                            @if (loader == Loader.ExclamationMark)
                            {
                                <i class="fa-solid text-warning fa-triangle-exclamation"></i>
                            }

                            @if (loader == Loader.CheckMark)
                            {
                                <i class="fa-solid text-success fa-circle-check"></i>
                            }

                        </div>
                    }


                </div>
            </div>
            <div class='input-dropdown shadow-lg @(showDropdown?"d-block":"d-none")'>
                <div @ref="inputDropdown">
                    <ul>
                        @foreach (var product in foundProducts)
                        {
                            <li class="found-product" @onkeydown="@((e)=>AddProductToCartWithEnterAsync(product, e.Key))" @onclick="@(()=>AddProductToCartAsync(product))" tabindex="0">@product.Name.ToUpper()</li>
                        }
                    </ul>
                </div>
            </div>
            <div class='@(addButtonShow?"":"d-none") ml-0 ' style="flex:1; padding-left:0 !important;">
                <button title="Add to database" @onclick="AddProductToDbAsync" style="margin:0 !important;" class='add-product-button input-group-text cursor-pointer btn btn-success rounded control-form '>@(timerSecs < 5 ? "" : timerSecs.ToString() + " |") <i class="fa-solid fa-database" style="pointer-events:none"></i></button>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col-12 h-100 overflow-auto">
                @if (zeroOrderError)
                {
                    <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Class="mt-3" ContentAlignment="HorizontalAlignment.Center">Product Quantity can't be 0</MudAlert>
                }

                @if (orderProducts is not null && orderProducts.Count > 0)
                {
                    @foreach (var product in orderProducts)
                    {
                        @if (!string.IsNullOrEmpty(product.Name))
                        {
                            <div class="bg-light text-dark pt-2 pl-3 pr-3 pb-3 my-4 rounded position-relative">
                                <div class="d-flex justify-content-end">
                                    <div @onclick="@(()=>RemoveFromCart(product))" class="d-flex justify-content-center align-items-center cursor-pointer">
                                        <i class="fa-solid fa-xmark" style="font-size:1.3rem;"></i>
                                    </div>
                                </div>

                                <div class="d-flex justify-content-between align-content-center ">
                                    <div class="border border-0 border-bottom d-flex justify-content-between fw-bolder mb-2 border-dark" style="width:100%; font-size:1.1rem;">
                                        <div>
                                            @product.Name.ToUpper()
                                        </div>
                                        <div class="@(product.Quantity == 0?"text-danger":"text-dark")">
                                            @product.Quantity @(product.Measurement == (int)Measurement.Kg ? "Kg" : "Pcs")
                                        </div>
                                    </div>
                                </div>
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <div>
                                            <b>Unit : @(product.Measurement == (int)Measurement.Kg ? "Kg" : "Pcs")</b>
                                        </div>
                                        <div class="mt-2">
                                            <button class="btn btn-sm  @(product.Measurement == Measurement.Pcs?"btn-primary":"btn-outline-primary")" @onclick="@(()=>ChangeMeasurement(product, Measurement.Pcs))">Pcs</button>
                                            <button class="btn btn-sm @(product.Measurement == Measurement.Kg?"btn-primary":"btn-outline-primary")" @onclick="@(()=>ChangeMeasurement(product, Measurement.Kg))">Kg</button>
                                        </div>
                                    </div>
                                    <div>
                                        @if (product.Measurement == (int)Measurement.Kg)
                                        {

                                            <div class="mb-2">
                                                <div class="btn btn-danger btn-sm mx-1" style="width:80px;" @onclick="@(()=>ChangeQuantity(product, -0.1f))">
                                                    <i class="fa-solid fa-minus"></i> 0.1
                                                </div>
                                                <div class="btn btn-success btn-sm mx-1" style="width:80px;" @onclick="@(()=>ChangeQuantity(product, 0.1f))">
                                                    <i class="fa-solid fa-plus"></i> 0.1
                                                </div>
                                            </div>
                                            <div>
                                                <div class="btn btn-outline-danger btn-sm mx-1" style="width:80px;" @onclick="@(()=>ChangeQuantity(product, -1))">
                                                    <i class="fa-solid fa-minus"></i> 1
                                                </div>
                                                <div class="btn btn-outline-success btn-sm mx-1" style="width:80px;" @onclick="@(()=>ChangeQuantity(product, 1))">
                                                    <i class="fa-solid fa-plus"></i> 1
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="mb-2">
                                                <div class="btn btn-danger btn-sm mx-1" style="width:80px;" @onclick="@(()=>ChangeQuantity(product, -1))">
                                                    <i class="fa-solid fa-minus"></i> 1
                                                </div>
                                                <div class="btn btn-success btn-sm mx-1" style="width:80px;" @onclick="@(()=>ChangeQuantity(product, 1))">
                                                    <i class="fa-solid fa-plus"></i> 1
                                                </div>
                                            </div>
                                            <div>
                                                <div class="btn btn-outline-danger btn-sm mx-1" style="width:80px;" @onclick="@(()=>ChangeQuantity(product, -10))">
                                                    <i class="fa-solid fa-minus"></i> 10
                                                </div>
                                                <div class="btn btn-outline-success btn-sm mx-1" style="width:80px;" @onclick="@(()=>ChangeQuantity(product, 10))">
                                                    <i class="fa-solid fa-plus"></i> 10
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    }
                        @if (addMessage)
                        {
                            <label>Message</label>
                        <textarea @oninput="TextAreaInput" class="form-control mb-3 mt-1 text-order-extra" style="resize:none; height:150px;"></textarea>
                        }
                        <div class="d-flex justify-content-between">
                            @if (!addMessage)
                            {
                                <button @onclick="ShowMessage" class='mt-1 btn btn-success border border-white mr-2'>Add Message</button>
                            }
                            else
                            {
                                <button @onclick="ShowMessage" class='mt-1 btn btn-danger border border-white mr-2'>Remove Message</button>
                            }
                                <button @onclick="OrderProductsAsync" class='mt-1 btn btn-dark border border-white'>Order Now</button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

    <div class="order-menu col-lg-5 @(mobileNavigation==MobileNavigation.History?"show-mobile-order-menu":"")">
        <div class="bg-dark p-3 rounded ">
            <div class="d-flex justify-content-between h5">
                <div>
                    <span>Order History</span>
                </div>
                <div>@DateTime.UtcNow.Date.ToShortDateString()</div>
            </div>
            <hr class="my-2" />
            <MudExpansionPanels Elevation="0">
                @foreach (var order in orders)
                {
                    <MudExpansionPanel HideIcon="true">
                        <TitleContent>
                            @("Order Time : " + @order.TimeOrdered.ToString("HH:MM"))

                            @if (order.OrderStatus == OrderStatus.Ordered)
                            {
                                <div class="float-end">
                                    <i class="fa-solid fa-list-ul"></i>
                                    <i class="fa-solid fa-arrow-right"></i>
                                </div>
                            }

                            @if (order.OrderStatus == OrderStatus.OrderTaken)
                            {
                                <i class="fa-solid fa-dolly float-end text-success"></i>
                            }

                            @* <i class="fa-solid fa-dolly float-end text-success"></i> *@
                        </TitleContent>
                        <ChildContent>
                            <ul>
                                @foreach (var product in order.OrderedProducts)
                                {
                                    <li class="order-product-list">
                                        <div class="d-flex justify-content-between">
                                            <div>
                                                @product.Name
                                            </div>
                                            <div>
                                                @product.Quantity @product.Measurement.ToString()
                                            </div>
                                        </div>
                                    </li>
                                }
                            </ul>

                            @if (!string.IsNullOrEmpty(order.Message))
                            {
                                <MudPaper Class="mt-2 p-2" Outlined="true">
                                    <h6>Message : </h6>
                                    @order.Message
                                </MudPaper>
                            }

                            <MudButton Color="Color.Error" @onclick="@(()=>RemoveOrderAsync(order.OrderId))" Class="float-end my-2" Disabled="@(order.OrderStatus!=OrderStatus.Ordered)">Delete</MudButton>
                        </ChildContent>

                    </MudExpansionPanel>


                }
            </MudExpansionPanels>
        </div>
</div>
</div>


@if (reloadPage)
{
    <div style="position:absolute; top:0; left:0; width:100%; height:100%; background-color:gray;">
        <div style="position:absolute; left:50%; top:50%; transform:translate(-50%, -50%);">
            <button class="btn btn-primary" @onclick="Reload">Reload</button>
        </div>
    </div>
}


@code {
    string text = "";
    string areaText = "";
    bool addButtonShow = false;
    bool showDropdown = false;
    bool showLoader = false;
    bool reloadPage = false;
    bool zeroOrderError = false;
    bool addMessage = false;

    MobileNavigation mobileNavigation = MobileNavigation.Order;

    Loader loader = Loader.None;

    // timers ////////////////////////
    int timerToPerformSearch = 750;
    int timerToAddProduct = 3000;
    int timerToInputReset = 60000;

    HashSet<POS_OS_GG.Models.ViewModels.ProductInfo> foundProducts = new();
    List<ProductInfo> orderProducts = new();
    List<OrderDTO> orders = new List<OrderDTO>();

    int timerSecs = 5;

    ElementReference input;
    ElementReference inputDropdown;

    CancellationTokenSource searchCancellationTokenSource;
    CancellationTokenSource eraseTextCancellationTokenSource;

    Timer timer;

    string userId = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        var userAuthState = await AuthProvider.GetAuthenticationStateAsync();

        var claim = userAuthState.User.Claims.FirstOrDefault();

        if (claim is null || string.IsNullOrEmpty(claim.Value))
        {
            await SignInManager.SignOutAsync();
            NavigationManager.NavigateTo("/");
        }

        userId = claim.Value;

        MobileMenuService.OnMobileNavClicked += MobileNavClicked;

        if (string.IsNullOrEmpty(userId))
        {
            reloadPage = true;
        }

        var fetchOrdersResponse = await OrderService.GetOrdersAsync(userId);

        if (fetchOrdersResponse.IsSuccess)
            orders = fetchOrdersResponse.Data.ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !reloadPage)
        {
            var objRefrence = DotNetObjectReference.Create(this);

            await JsRuntime.InvokeVoidAsync("focusElementOnKeyPress", input, inputDropdown);
            await JsRuntime.InvokeVoidAsync("onEscClicked", objRefrence);
            await JsRuntime.InvokeVoidAsync("onInputBlur", objRefrence, input);

            timer = new Timer(1000);
            timer.Enabled = true;
            timer.Elapsed += OnTimedEvent;
            timer.Stop();
            addButtonShow = false;
        }
    }

    void MobileNavClicked(MobileNavigation navigation)
    {
        mobileNavigation = navigation;
        StateHasChanged();
    }

    void InputChanged(ChangeEventArgs e)
    {
        text = e.Value.ToString();
        HideAddButton();
        RestartEraseTextTimer();
        RestartSearchTimer();
    }

    async void RestartEraseTextTimer()
    {
        eraseTextCancellationTokenSource?.Cancel();
        eraseTextCancellationTokenSource = new CancellationTokenSource();

        try
        {
            await Task.Delay(timerToInputReset, eraseTextCancellationTokenSource.Token);
            text = "";
            await JsRuntime.InvokeVoidAsync("clearSearchInput", input);
            showDropdown = false;
            addButtonShow = false;
            loader = Loader.None;
            StateHasChanged();
        }
        catch (TaskCanceledException)
        {
            // Ignore the cancellation
        }
    }

    async void RestartSearchTimer()
    {
        searchCancellationTokenSource?.Cancel();
        loader = Loader.Spinner;


        if (text == "")
        {
            showDropdown = false;
            loader = Loader.None;
            return;
        }

        searchCancellationTokenSource = new CancellationTokenSource();

        try
        {
            await Task.Delay(timerToPerformSearch, searchCancellationTokenSource.Token);
            await PerformSearch();

        }
        catch (TaskCanceledException)
        {
            // Ignore the cancellation
        }
    }

    void ShowMessage()
    {
        addMessage = !addMessage;
        text = "";
    }

    async Task InputFocus()
    {
        await PerformSearch();
    }

    async Task PerformSearch()
    {

        var response = await ProductService.GetProductsAsync(text.ToUpper());

        if (response.IsSuccess)
        {


            if (orderProducts.Count > 0)
            {
                foreach (var responseProduct in response.Data)
                {
                    bool productFound = false;
                    foreach (var orderProduct in orderProducts)
                    {
                        if (responseProduct.Name == orderProduct.Name)
                        {
                            productFound = true;
                            break;
                        }

                    }

                    if (productFound)
                    {
                        response.Data.Remove(responseProduct);
                    }

                }

            }
            foundProducts = response.Data;

        }

        showDropdown = foundProducts is not null && foundProducts.Count > 0;

        if (foundProducts.Count == 0)
        {
            ShowAddButton();
            StateHasChanged();
            loader = Loader.ExclamationMark;
            return;
        }
        else
        {
            loader = Loader.CheckMark;
        }

        StateHasChanged();

    }

    async Task AddProductToDbAsync()
    {
        var result = await ProductService.RegisterProductAsync(text, userId);

        if (!result.IsSuccess)
            return;
        var productResult = await ProductService.GetProductAsync(text);

        if (!productResult.IsSuccess)
            return;

        await AddProductToCartAsync(productResult.Data);

        text = "";

        await ClearSearchAsync();

        StateHasChanged();
    }

    async Task AddProductToCartAsync(ProductInfo product)
    {
        orderProducts.Add(new ProductInfo
        {
            Id = product.Id,
            CategoryName = product.Name,
            CategoryId = product.CategoryId,
            CategoryIcon = product.CategoryIcon,
            Quantity = 0,
            Name = product.Name,
            Measurement = Measurement.Pcs
        });
        await ClearSearchAsync();
        StateHasChanged();
    }

    async Task AddProductToCartWithEnterAsync(ProductInfo product, string key)
    {
        if (key == "Enter")
        {
            await AddProductToCartAsync(product);
        }
    }

    private void RemoveFromCart(ProductInfo product)
    {
        orderProducts.Remove(product);

        StateHasChanged();
    }

    void OnTimedEvent(Object source, System.Timers.ElapsedEventArgs e)
    {
        timerSecs -= 1;

        if (timerSecs <= 0)
        {
            timerSecs = 0;
            addButtonShow = true;
            timer.Stop();
        }

        InvokeAsync(StateHasChanged);
    }

    void ChangeMeasurement(ProductInfo product, Measurement measurement)
    {
        product.Measurement = measurement;
        product.Quantity = 0;
    }

    void ChangeQuantity(ProductInfo product, float quantity)
    {

        if (product.Quantity + quantity < 0)
        {
            product.Quantity = 0;
            return;
        };

        product.Quantity += quantity;
        // round product.Quantity to 2 decimal places
        product.Quantity = (float)Math.Round(product.Quantity, 2);
    }


    async Task ClearSearchAsync()
    {
        await JsRuntime.InvokeVoidAsync("clearSearchInput", input);
        loader = Loader.None;
        text = "";
        HideAddButton();
        showDropdown = false;
        foundProducts = new();
        StateHasChanged();
    }


    void ShowAddButton()
    {
        timerSecs = timerToAddProduct / 1000;
        timer.Stop();
        timer.Start();
    }

    void HideAddButton()
    {
        timer.Stop();
        addButtonShow = false;
    }

    async Task OrderProductsAsync()
    {

        if (orderProducts.Any(x => x.Quantity <= 0))
        {
            zeroOrderError = true;
            return;
        }

        zeroOrderError = false;

        var response = await OrderService.OrderProductsAsync(orderProducts, areaText, userId);

        if (response.IsSuccess)
        {
            orderProducts = new();
            areaText = "";
            text = "";

            var ordersResponse = await OrderService.GetOrdersAsync(userId);

            if (ordersResponse.IsSuccess)
                orders = ordersResponse.Data.ToList();

            addMessage = false;
        }

        loader = Loader.None;
    }

    async Task RemoveOrderAsync(int id)
    {
        var response = await OrderService.RemoveOrderAsync(id);

        if (response.IsSuccess)
        {
            var tempOrder = orders.FirstOrDefault(x => x.OrderId == id);

            if (tempOrder is not null && tempOrder.OrderId != 0)
                orders.Remove(tempOrder);
        }
    }

    void Reload()
    {
        NavigationManager.NavigateTo("/production/order", true);
    }

    [JSInvokable()]
    public void HideSearchDropDown()
    {
        showDropdown = false;
        StateHasChanged();
    }

    [JSInvokable("InputBlur")]
    public async Task OnInputBlurTriggered()
    {
        showDropdown = false;
        searchCancellationTokenSource?.Cancel();
        StateHasChanged();
    }

    void TextAreaInput(ChangeEventArgs e)
    {
            areaText = e.Value.ToString();
    }


    [JSInvokable("OnEscClicked")]
    public async Task EscClicked()
    {
        await JsRuntime.InvokeVoidAsync("console.log", "Any ESC clicked");
        await ClearSearchAsync();
    }

    public void Dispose()
    {
        if (timer is not null)
            timer.Elapsed -= OnTimedEvent;

        MobileMenuService.OnMobileNavClicked -= MobileNavClicked;
    }

    public enum Loader
    {
        None,
        Spinner,
        ExclamationMark,
        CheckMark
    }
}
