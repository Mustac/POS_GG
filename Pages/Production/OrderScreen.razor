@page "/production/order"

@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using POS_OS_GG.Models.ViewModels
@using System.Security.Claims
@layout ProductionLayout
@inject IJSRuntime JSRuntime
@inject ProductService ProductService
@inject AuthenticationStateProvider AuthenticationStateProvider

<div style="max-width:650px; width:100%; margin-top:50px" class="mx-auto px-4">
    <div Class='p-3 border rounded @((registrationActive) ? "mb-4 border-warning shadow" : "mb-0 border-0 shadow-none")'>
        <MudIconButton @onclick="RegisterProductClicked" ButtonType="ButtonType.Button"
                       Icon="@((registrationActive) ? Icons.Material.Filled.Close : Icons.Material.Filled.KeyboardDoubleArrowDown)"
                       Style="position:absolute; top:10px; right:50%; transform:translateX(50%)"
                       Variant="Variant.Filled" Color="@((registrationActive) ? Color.Error : Color.Primary)" />


        @if (registrationActive)
        {
            <EditForm Model="_productRegistration" OnValidSubmit="RegisterProductAsync">
                <DataAnnotationsValidator />
                <MudTextField Variant="Variant.Filled" Label="Product Name" @bind-Value="_productRegistration.Name" For="@(() => _productRegistration.Name)" />
                <MudButton ButtonType="ButtonType.Submit" Class="mt-2" FullWidth="true" Color="Color.Primary" Variant="Variant.Filled">Register Product</MudButton>
            </EditForm>
        }
    </div>
    <div class="search-reg-active">
        <MudAutocomplete Style="width:100%" T="ProductInfo" id="autocomplete-input" @bind-Value="SelectedProduct" Label="Products" SearchFunc="@Search"
                         Variant="Variant.Outlined"
                         ResetValueOnEmptyText="false"
                         CoerceText="false" 
                         CoerceValue="false"
                         AdornmentIcon="@Icons.Material.Filled.Search" 
                         AdornmentColor="Color.Surface"
                         ToStringFunc="@(product => product?.Name)"
                         ShowProgressIndicator="true" 
                         SelectOnClick="true"
                         />
    </div>
    @if(orderProducts.Count > 0)
    {
        @foreach(var product in orderProducts)
        {
            @if (!string.IsNullOrEmpty(product.Name))
            {
                <div class="bg-light text-dark p-3 m-3 rounded">
                    <div class="d-flex justify-content-between align-content-center ">
                        <div class="border border-0 border-bottom d-flex justify-content-between fw-bolder mb-2 border-dark" style="width:100%">
                            <div>
                                @product.Name
                            </div>
                            <div>
                                10 pcs
                            </div>
                        </div>
                    </div>
                    <div class="d-flex justify-content-between">
                        <div>
                            <div>
                                <b>Unit :</b>
                            </div>
                            <div class="mt-2">
                                <button class="btn btn-primary btn-sm">Kg/l</button>
                                <button class="btn btn-sm  btn-outline-primary ">PC</button>
                            </div>
                        </div>
                        <div>
                            <div class="mb-2">
                                <div class="btn btn-success btn-sm mx-1" style="width:100px;">
                                    <i class="fa-solid fa-plus"></i> 1
                                </div>
                                <div class="btn btn-outline-success btn-sm mx-1" style="width:100px;">
                                    <i class="fa-solid fa-plus"></i> 10
                                </div>
                            </div>
                            <div>
                                <div class="btn btn-danger btn-sm mx-1" style="width:100px;">
                                    <i class="fa-solid fa-minus"></i> 1
                                </div>
                                <div class="btn btn-outline-danger btn-sm mx-1" style="width:100px;">
                                    <i class="fa-solid fa-minus"></i> 10
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    }

</div>



@code {
    ProductRegistration _productRegistration = new ProductRegistration();

    private ProductInfo selectedProduct = new ProductInfo();

    List<ProductInfo> orderProducts = new List<ProductInfo>();

    private ProductInfo SelectedProduct
    {
        get => selectedProduct;
        set
        {
            AddProductToOrder();
            selectedProduct = value;
        }
    } 

    string searchValue = string.Empty;
    string userId = string.Empty;

    bool registrationActive = false;

    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User is null || !authState.User.Identity.IsAuthenticated)
            return;
        userId = authState.User.Claims.FirstOrDefault().Value;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // await JSRuntime.InvokeVoidAsync("focusElementOnKeyPress");
        }
    }

    private async Task<IEnumerable<ProductInfo>> Search(string value)
    {
        value = value.ToUpper();

        searchValue = value;

        var result = await ProductService.GetProductsAsync(value);


        if (!result.IsSuccess)
        {
            return new HashSet<ProductInfo>();
        }

        return result.Data;
    }

    void RegisterProductClicked()
    {
        registrationActive = !registrationActive;
        if (!registrationActive)
            _productRegistration = new ProductRegistration();

    }

    private async Task RegisterProductAsync()
    {
        var registerProductResult = await ProductService.RegisterProductAsync(_productRegistration.Name, userId);
    }

    void ValueChanged(ProductInfo product)
    {
        selectedProduct = product;
    }

    void AddProductToOrder()
    {
        orderProducts.Add(selectedProduct);
        StateHasChanged();
    }

   
}

