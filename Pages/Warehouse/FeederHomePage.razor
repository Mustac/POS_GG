@page "/feeder/"
@layout WarehouseLayout
@inject OrderService OrderService
@using System.Timers;
@implements IDisposable

<h4 class="text-center py-4">@DateTime.UtcNow.ToLongDateString()</h4>

@if (orders?.Count > 0)
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-4">
                <h5 class="text-center mb-4">Orders</h5>
                @foreach (var order in orders)
                {
                    <MudPaper Class="p-3 my-2">
                    <div class="d-flex w-100 justify-content-between">
                        <div>-> @order.UserOrderedName</div>
                        <div>
                        <span class="pr-2">@order.TimeOrdered.ToString("HH:MM")h</span>
                        <span>-@((DateTime.UtcNow - order.TimeOrdered).Minutes)m</span>
                        </div>
                    </div>
                    <hr  class="my-1"/>
                        <div>
                                <ul>
                            @foreach (var product in order.OrderedProducts)
                            {
                                    <li>
                                        <div class="d-flex justify-content-between">
                                            <div>
                                                @product.Name
                                            </div>
                                            <div>
                                                @product.Quantity @product.Measurement
                                            </div>
                                        </div>
                                        </li>
                            }
                                </ul>
                            </div>
                            <div class="d-flex justify-content-end mt-2">
                                <MudButton Color="Color.Success" Variant="Variant.Text">Take Order -></MudButton>
                            </div>
                        </MudPaper>
                }

            </div>
        </div>
    </div>
}


@code {
    List<OrderDTO> orders = new List<OrderDTO>();

    Timer timer;


    protected async override Task OnInitializedAsync()
    {
        timer = new Timer(1000);
        timer.Start();
        timer.Elapsed += TimerTick;

        var orderResponse = await OrderService.GetOrdersAsync();
        orders = orderResponse.Data;
    }

    void TimerTick(Object source, ElapsedEventArgs e)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        
    }


}
